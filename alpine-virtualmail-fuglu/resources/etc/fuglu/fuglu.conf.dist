
[main]

#identifier can be any string that helps you identifying your config file
#this helps making sure the correct config is loaded. this identifier will be printed out when fuglu is reloading its config
identifier=virtualmail

#run as a daemon? (fork)
daemonize=0

#run as user
user=vmail

#run as group
group=vmail

#comma separated list of directories in which fuglu searches for additional plugins and their dependencies
plugindir=/data/fuglu/plugins

#what SCANNER plugins do we load, comma separated
plugins=archive,attachment,clamav,spf,dkimverify,spamassassin

#what PREPENDER plugins do we load, comma separated
prependers=debug,skip

#what APPENDER plugins do we load, comma separated
#appender plugins are plugins run after the scanning plugins
#appenders will always be run, even if a a scanner plugin decided to delete/bounce/whatever a message
#(unless a mail is deferred in which case running the appender would not make sense as it will come again)
appenders=

#address fuglu should listen on. usually 127.0.0.1 so connections are accepted from local host only
bindaddress=0.0.0.0

#incoming port(s) (postfix connects here)
#you can use multiple comma separated ports here
#f.ex. to separate incoming and outgoing mail and a special port for debugging messages
#10025: standard incoming mail
#10099: outgoing mail
#10888: debug port
incomingport=esmtp:10025,esmtp:10099,10888

#outgoing hostname/ip where postfix is listening for re-injects.
#use ${injecthost} to connect back to the IP where the incoming connection came from
outgoinghost=127.0.0.1

#outgoing port  where postfix is listening for re-injects)
outgoingport=10026

##outgoing helo we should use for re-injects
#leave empty to auto-detect current hostname
outgoinghelo=

#temp dir where fuglu can store messages while scanning
tempdir=/tmp

#String to prepend to added headers
prependaddedheaders=X-Fuglu-

#If a plugin decides to delete a message, save a copy here
#default empty, eg. do not save a backup copy
trashdir=

#list all deleted messages in 00-fuglutrash.log in the trashdir
trashlog=0

#if this is set to True/1/yes , no Bounces will be sent from Fuglu eg. after a blocked attachment has been detected
#This may be used for debugging/testing to make sure fuglu can not produce backscatter
disablebounces=0

#write debug info header to every mail
debuginfoheader=0

#write a Spamstatus YES/NO header
spamstatusheader=1

#write suspect ID to every mail
suspectidheader=1

#write mrtg statistics
mrtgdir=

#port where fuglu provides statistics etc (used by fuglu_control). Can also be a path to a unix socket
controlport=/tmp/fuglu_control.sock

#Log pattern to use for all suspects in fuglu log. set empty string to disable logging generic suspect info. Supports the usual template variables plus: ${size}, ${spam} ${highspam}, ${modified} ${decision} ${tags} (short tags representagion) ${fulltags} full tags output, ${decision}
logtemplate=Suspect ${id} from=${from_address} to=${to_address} size=${size} spam=${spam} virus=${virus} modified=${modified} decision=${decision}

#warn about known severe problems/security issues of current version.
#Note: This performs a DNS lookup of gitrelease.patchlevel.minorversion.majorversion.versioncheck.fuglu.org on startup and fuglu --lint.
#No other information of any kind is transmitted to outside systems.
#Disable this if you consider the DNS lookup an unwanted information leak.
versioncheck=1

[PluginAlias]

debug=fuglu.plugins.p_debug.MessageDebugger

skip=fuglu.plugins.p_skipper.PluginSkipper

fraction=fuglu.plugins.p_fraction.PluginFraction

archive=fuglu.plugins.archive.ArchivePlugin

attachment=fuglu.plugins.attachment.FiletypePlugin

clamav=fuglu.plugins.clamav.ClamavPlugin

spamassassin=fuglu.plugins.sa.SAPlugin

vacation=fuglu.plugins.vacation.VacationPlugin

actionoverride=fuglu.plugins.actionoverride.ActionOverridePlugin

icap=fuglu.plugins.icap.ICAPPlugin

sssp=fuglu.plugins.sssp.SSSPPlugin

fprot=fuglu.plugins.fprot.FprotPlugin

scriptfilter=fuglu.plugins.script.ScriptFilter

dkimsign=fuglu.plugins.domainauth.DKIMSignPlugin

dkimverify=fuglu.plugins.domainauth.DKIMVerifyPlugin

spf=fuglu.plugins.domainauth.SPFPlugin

[databaseconfig]

#read runtime configuration values from a database. requires sqlalchemy to be installed
dbconnectstring=mysql://{{ .FUGLU_DB_USERNAME }}:{{ .FUGLU_DB_PASSWORD }}@{{ .FUGLU_DB_HOST }}/{{ .FUGLU_DB_DATABASE }}

#sql query that returns a configuration value override. sql placeholders are ':section',':option' in addition the usual suspect filter default values like ':to_domain', ':to_address' etc
#if the statement returns more than one row/value only the first value in the first row is used
sql=SELECT value FROM fugluconfig WHERE `section`=:section AND `option`=:option AND `scope` IN ('$GLOBAL',CONCAT('%',:to_domain),:to_address) ORDER BY `scope` DESC

[performance]

#minimum scanner threads
minthreads=2

#maximum scanner threads
maxthreads=40

#Method for parallelism, either 'thread' or 'process'
backend=thread

#Initial number of processes when backend='process'. If 0 (the default), automatically selects twice the number of available virtual cores. Despite its 'initial'-name, this number currently is not adapted automatically.
initialprocs=0

[spam]

#what to do with messages that plugins think are spam but  not so sure  ("low spam")
#in normal usage you probably never set this something other than DUNNO
#this is a DEFAULT action, eg. anti spam plugins should take this if you didn't set
# a individual override
defaultlowspamaction=DUNNO

#what to do with messages if a plugin is sure it is spam ("high spam")
#in after-queue mode this is probably still DUNNO or maybe DELETE for courageous people
#this is a DEFAULT action, eg. anti spam plugins should take this if you didn't set
# a individual override
defaulthighspamaction=REJECT

[smtpconnector]

#confirmation template sent back to the connecting postfix for accepted messages
requeuetemplate=FUGLU REQUEUE(${id}): ${injectanswer}

[environment]

#Distance to the boundary MTA ("how many received headers should fuglu skip to determine the last untrusted host information"). Only required if plugins need to have information about the last untrusted host(SPFPlugin)
boundarydistance=0

#Optional regex that should be applied to received headers to skip trusted (local) mta helo/ip/reverse dns.
#Only required if plugins need to have information about the last untrusted host and the message doesn't pass a fixed amount of hops to reach this system in your network
trustedhostsregex=

[esmtpconnector]

#confirmation template sent back to the connecting client for accepted messages
queuetemplate=${injectanswer}

#only deliver the message to the first recipient, ignore the others. This is useful in spamtrap setups where we don't want to create duplicate deliveries.
ignore_multiple_recipients=0

[virus]

##what to do with messages if a plugin detects a virus
#in after-queue mode this should probably be DELETE
#in pre-queue mode you could use REJECT
#this is a DEFAULT action, eg. anti-virus plugins should take this if you didn't set
# a individual override
defaultvirusaction=REJECT

[ArchivePlugin]

#Archiving SuspectFilter File
archiverules=/data/fuglu/archive.regex

#storage for archived messages
archivedir=/tmp

#subdirectory within archivedir
subdirtemplate=${to_domain}

#filename template for the archived messages
filenametemplate=${id}.eml

#if true/1/yes: store original message
#if false/0/no: store message probably altered by previous plugins, eg with spamassassin headers
storeoriginal=1

#change owner of saved messages (username or numeric id) - this only works if fuglu is running as root (which is NOT recommended)
chown=

#change group of saved messages (groupname or numeric id) - the user running fuglu must be a member of the target group for this to work
chgrp=

#set file permissions of saved messages
chmod=

[FiletypePlugin]

#Mail template for the bounce to inform sender about blocked attachment
template_blockedfile=/data/fuglu/templates/blockedfile.tmpl

#inform the sender about blocked attachments.
#If a previous plugin tagged the message as spam or infected, no bounce will be sent to prevent backscatter
sendbounce=1

#directory that contains attachment rules
rulesdir=/data/fuglu/rules

#what should the plugin do when a blocked attachment is detected
#REJECT : reject the message (recommended in pre-queue mode)
#DELETE : discard messages
#DUNNO  : mark as blocked but continue anyway (eg. if you have a later quarantine plugin)
blockaction=REJECT

#sqlalchemy connectstring to load rules from a database and use files only as fallback. requires SQL extension to be enabled
dbconnectstring=

#sql query to load rules from a db. #:scope will be replaced by the recipient address first, then by the recipient domain
#:check will be replaced 'filename','contenttype','archive-filename' or 'archive-contenttype'
query=SELECT action,regex,description FROM attachmentrules WHERE scope=:scope AND checktype=:checktype ORDER BY prio

#enable scanning of filenames within archives (zip,rar). This does not actually extract the files, it just looks at the filenames found in the archive.
checkarchivenames=0

#extract compressed archives(zip,rar) and check file content type with libmagics
#note that the files will be extracted into memory - tune archivecontentmaxsize  accordingly.
#fuglu does not extract archives within the archive(recursion)
checkarchivecontent=0

#only extract and examine files up to this amount of (uncompressed) bytes
archivecontentmaxsize=5000000

#comma separated list of archive extensions. do only process archives of given types.
enabledarchivetypes=

[ClamavPlugin]

#hostname where clamd runs
host=localhost

#tcp port number or path to clamd.sock for unix domain sockets
#example /var/lib/clamav/clamd.sock or on ubuntu: /var/run/clamav/clamd.ctl
port=3310

#socket timeout
timeout=30

#*EXPERIMENTAL*: Perform multiple scans over the same connection. May improve performance on busy systems.
pipelining=0

#maximum message size, larger messages will not be scanned.
#should match the 'StreamMaxLength' config option in clamd.conf
maxsize=22000000

#how often should fuglu retry the connection before giving up
retries=3

#action if infection is detected (DUNNO, REJECT, DELETE)
virusaction=DEFAULTVIRUSACTION

#action if there is a problem (DUNNO, DEFER)
problemaction=DEFER

#reject message template if running in pre-queue mode and virusaction=REJECT
rejectmessage=threat detected: ${virusname}

#*EXPERIMENTAL*: fallback to clamscan if clamd is unavailable. YMMV, each scan can take 5-20 seconds and massively increase load on a busy system.
clamscanfallback=0

#the path to clamscan executable
clamscan=/usr/bin/clamscan

#process timeout
clamscantimeout=30

[SAPlugin]

#hostname where spamd runs
host=localhost

#tcp port number or path to spamd unix socket
port=783

#how long should we wait for an answer from sa
timeout=30

#maximum size in bytes. larger messages will be skipped
maxsize=256000

#enable scanning of messages larger than maxsize. all attachments will be stripped and only headers, plaintext and html part will be scanned. If message is still oversize it will be truncated. Also enable forwardoriginal or truncated version of large messages will be forwarded
strip_oversize=0

#how often should fuglu retry the connection before giving up
retries=3

#should we scan the original message as retreived from postfix or scan the current state
#in fuglu (which might have been altered by previous plugins)
#only set this to disabled if you have a custom plugin that adds special headers to the message that will be
#used in spamassassin rules
scanoriginal=1

#forward the original message or replace the content as returned by spamassassin
#if this is set to True/1/Yes , no spamassassin headers will be visible in the final message.
#"original" in this case means "as passed to spamassassin", eg. if 'scanoriginal' is set to 0 above this will forward the
#message as retreived from previous plugins
forwardoriginal=0

#what header does SA set to indicate the spam status
#Note that fuglu requires a standard header template configuration for spamstatus and score extraction
#if 'forwardoriginal' is set to 0
#eg. start with _YESNO_ or _YESNOCAPS_ and contain score=_SCORE_
spamheader=X-Spam-Status

#enable user_prefs in SA. This hands the recipient address over the spamd connection which allows SA to search for configuration overrides
peruserconfig=1

#spamscore threshold to mark a message as high spam
highspamlevel=15

#what should we do with high spam (spam score above highspamlevel)
highspamaction=DEFAULTHIGHSPAMACTION

#what should we do with low spam (eg. detected as spam, but score not over highspamlevel)
lowspamaction=DEFAULTLOWSPAMACTION

#action if there is a problem (DUNNO, DEFER)
problemaction=DEFER

#reject message template if running in pre-queue mode
rejectmessage=message from ${from_address} to ${to_domain} identified as spam (score=${spamscore})

#consult spamassassins(or any other) sql blacklist for messages that are too big for spam checks
#requires the sql extension to be enabled
check_sql_blacklist=0

#sqlalchemy db connect string
sql_blacklist_dbconnectstring=mysql:///localhost/spamassassin

#SQL query to get the blacklist entries for a suspect
#you may use template variables: ${from_address} ${from_domain} ${to_address} ${to_domain}
sql_blacklist_sql=SELECT value FROM userpref WHERE prefid='blacklist_from' AND username in ('$GLOBAL',concat('%',${to_domain}),${to_address})

[debug]

#messages incoming on this port will be debugged to a logfile
#Make sure the debugport is also set in the incomingport configuration option in the main section
debugport=10888

#debug log output
debugfile=/tmp/fuglu_debug.log

#debugged message can not be bounced
nobounce=1

#don't re-inject debugged messages back to postfix
noreinject=1

#don't run appender plugins for debugged messages
noappender=1

[PluginSkipper]

filterfile=/data/fuglu/skipplugins.regex

[DKIMVerifyPlugin]

[SPFPlugin]

[DKIMSignPlugin]
#comma separated list of headers to sign. empty string=sign all headers
signheaders=From,Reply-To,Subject,Date,To,CC,Resent-Date,Resent-From,Resent-To,Resent-CC,In-Reply-To,References,List-Id,List-Help,List-Unsubscribe,List-Subscribe,List-Post,List-Owner,List-Archive

#include l= tag in dkim header
signbodylength=False

#selector to use when signing, supports templates
selector=mail

#Location of the private key file. supports standard template variables plus additional ${he
privatekeyfile=/data/fuglu/dkim/${header_from_domain}.key

#Type of body canonicalization (simple or relaxed)
canonicalizebody=relaxed

#Type of header canonicalization (simple or relaxed)
canonicalizeheaders=relaxed
